        //OPTIMAL FOR +VE AND -VE'S
        map<int ,int> mp;
        int maxLen=0,sum=0;
        
        for(int i=0;i<N;i++) {
            sum+=A[i];
            
            if(sum == K) {
                maxLen = max(maxLen,i+1);
            }
            
            int rem = sum - K;
            if(mp.find(rem) != mp.end()) {
                int len = i - mp[rem];
                maxLen = max(maxLen,len);
            }
            
            if(mp.find(sum) == mp.end()) 
                mp[sum] = i;
        }
        
        return maxLen;
    } 
    
    //OPTIMAL FOR +VE AND 0'S
    
    // int maxLen =0,right=0,left=0,sum=a[0];
    
    // while(right < N) {
        
    //     while(left <= right && sum >k) {
    //         sum-=a[left];
    //         left++;
    //     }
        
    //     if(sum == k) {
    //         maxLen = max(maxLen,right-left+1);
    //     }
    //     right++;
    //     if(right < N) sum+=a[right];
    // }
    
    // return maxLen;
